// // import { redirect } from 'next/navigation';
// redirect('/'); // homeÏúºÎ°ú Í∞ê ÏûëÎèôÌïòÍ∏∞ ÏúÑÌï¥ÏÑú navigation ÏçºÏùå
// ‚ú® actionÏùÄ ÏÇ¨Ïö©ÏûêÎ•º Îã§Î•∏ Í≥≥ÏúºÎ°ú redirectÎèÑ Ìï† Ïàò ÏûàÎã§

// //////////////////////////////////////////////////
// // ‚úÖ 2024 SERVER ACTIONS
// // ‚úÖ 5-3. useFormState
// // // Server Action Ïùò Í≤∞Í≥ºÎ•º UIÎ°ú Ï†ÑÎã¨ÌïòÎäî Î∞©Î≤ï
// // ‚ú® login/page.tsx ÏóêÏÑú ÏòÆÍ≤® Ïò¥
// // ‚ú® actions.ts ÎùºÎäî ÏÉàÎ°úÏö¥ ÌååÏùº ÎßåÎì§Ïñ¥ÏÑú ÏòÆÍ≤®Ï§å use server ÏòÆÍ≤®Ï§å
// // client component ÏóêÏÑúÎèÑ server action ÏùÑ Ìò∏Ï∂úÌï† Ïàò ÏûàÏßÄÎßå Í∑∏ Î°úÏßÅÏù¥ Ïó¨Í∏∞ ÏûàÏùÑ ÏàòÎäî ÏóÜÎã§
// // use server Î°ú ÏãúÏûëÌïòÎäî, Î∂ÑÎ¶¨Îêú ÌååÏùºÏóê ÏûàÏñ¥Ïïº Ìï®
// // Ïó¨Í∏∞ ÏûàÎäî Î™®Îì† Ìï®ÏàòÎì§ÏùÄ Ï†ÑÎ∂Ä ÏÑúÎ≤ÑÏóêÏÑú Ïã§Ìñâ Îê®
// 'use server';

// export async function handleForm(prevState: any, formData: FormData) {
//   console.log(prevState);
//   await new Promise((resolve) => setTimeout(resolve, 5000));
//   // redirect('/'); // homeÏúºÎ°ú Í∞ê
//   return {
//     errors: ['wrong password', 'password too short'],
//   };
// }

// //////////////////////////////////////////////////
// // ‚úÖ 2024 UPDATE Validation
// // ‚úÖ 6-0. Introduction to Zod

// // üî∂ zod Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÇ¨Ïö©

// 'use server';

// export async function handleForm(prevState: any, formData: FormData) {
//   return {
//     errors: ['wrong password', 'password too short'],
//   };
// }

//////////////////////////////////////////////////
// ‚úÖ 2024 UPDATE Validation
// ‚úÖ 6-6. Log In Validation
// üî∂ Î°úÍ∑∏Ïù∏ Í≤ÄÏ¶ù

'use server';

import { z } from 'zod';
import {
  PASSWORD_MIN_LENGTH,
  PASSWORD_REGEX,
  PASSWORD_REGEX_ERROR,
} from '../../lib/constants';

const formSchema = z.object({
  email: z.string().email().toLowerCase(),
  password: z
    .string({
      required_error: 'Password is required',
    })
    .min(PASSWORD_MIN_LENGTH)
    .regex(PASSWORD_REGEX, PASSWORD_REGEX_ERROR),
});

export async function login(prevState: any, formData: FormData) {
  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  };
  const result = formSchema.safeParse(data);
  if (!result.success) {
    console.log(result.error.flatten());
    return result.error.flatten();
  } else {
    console.log(result.data);
  }
}
